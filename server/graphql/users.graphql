enum Role {
  OWNER
  ADMIN
  MEMBER
}

type UserGroupRole {
  user: ID!
  group: ID!
  role: Role!
}

type JoinedGroup {
  groupId: ID!
  groupName: String!
  role: Role!
}

type JoinedGroupInfo {
  userId: ID!
  joinedGroups: [JoinedGroup]
}

# type User {
#   id: ID!
#   name: String!
#   username: String!
#   email: String!
#   passwordHash: String!
#   joinedGroups: [JoinedGroup]
# }

type UserInfo {
  id: ID!
  name: String!
  username: String!
  email: String!
  joinedGroups: [JoinedGroup]
}

type UserBaseData {
  id: ID!
  name: String!
  username: String!
}

input UserInput {
  name: String!
  username: String!
  email: String!
  password: String!
}

input UserLoginInput {
  username: String!
  password: String!
}

type LoginData {
  token: String!
  userId: ID!
  username: String!
  email: String!
  name: String!
}

type Query {
  me: UserInfo
  getUserBaseData(id: ID!): UserBaseData
  allUsers: [UserInfo]
  getUserJoinedGroups: JoinedGroupInfo
}

type Mutation {
  createUser(user: UserInput): LoginData
  login(credentials: UserLoginInput): LoginData
  addUserToGroup(groupId: ID!, userId: ID!): UserGroupRole
  updateUserRole(userId: ID!, groupId: ID!, role: Role!): UserGroupRole
}

type Subscription {
  userAddedToGroup(userId: ID): UserGroupRole
}
