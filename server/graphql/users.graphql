type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  passwordHash: String!
  ownedGroups: [GroupInfo]
  joinedGroups: [GroupInfo]
}

type UserInfo {
  id: ID!
  name: String!
  username: String!
  email: String!  
}

input UserInput {
  name: String!
  username: String!
  email: String!
  password: String!
}

input UserLoginInput {
  username: String!
  password: String!
}

type LoginData {
  token: String!
  user: User!
}

type GroupInfos {
  joinedGroups: [GroupInfo]
  ownedGroups: [GroupInfo]
}

type Query {
  me: User
  allUsers: [UserInfo]
  findUser(username: String!): UserInfo
  getUserGroupInfo: GroupInfos
  findUserById(id: ID!): User
}

type Mutation {
  createUser(user: UserInput): LoginData
  login(credentials: UserLoginInput): LoginData
  addUserToGroup(groupId: ID!, userId: ID!): ID
}

type AddedGroups {
  userId: ID!
  joinedGroups: [GroupInfo]
}

type Subscription {
  userAddedToGroup(userId: ID!): AddedGroups
}
