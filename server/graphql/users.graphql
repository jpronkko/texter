enum Role {
  OWNER
  ADMIN
  MEMBER
}

type JoinedGroup {
  group: GroupInfo!
  role: Role!
}

type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  passwordHash: String!
  groups: [JoinedGroup]
}

type UserInfo {
  id: ID!
  name: String!
  username: String!
  email: String!
  groups: [JoinedGroup]
}

input UserInput {
  name: String!
  username: String!
  email: String!
  password: String!
}

input UserLoginInput {
  username: String!
  password: String!
}

type LoginData {
  token: String!
  userId: ID!
  username: String!
  email: String!
  name: String!
}

type Query {
  me: UserInfo
  allUsers: [UserInfo]
  findUser(username: String!): UserInfo
  getUserJoinedGroups: [JoinedGroup]
  findUserById(id: ID!): UserInfo
}

type Mutation {
  createUser(user: UserInput): LoginData
  login(credentials: UserLoginInput): LoginData
  addUserToGroup(groupId: ID!, userId: ID!): ID
  updateUserRole(userId: ID!, groupId: ID!, role: Role!): User
}

type AddedGroups {
  userId: ID!
  joinedGroups: [JoinedGroup]
}

type Subscription {
  userAddedToGroup(userId: ID!): AddedGroups
}
